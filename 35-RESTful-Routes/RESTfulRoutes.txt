GET VS POST

GET 
- Used to retrieve information
- Data is sent via query string
- Information is plainly visible in the URL!
- Limited amount of data can be sent

POST
- Used to post data to the server
- Used to write/create/update
- Data is sent via request body, not a query string!
- Can send any sort of data (JSON!)

INTRO TO REST   -> REPRESENTATIONAL STATE TRANSFER
REST is an "architectural style for distributed hypermedia systems". Yikes. 
It's basically a set of guidelines for how a client + server should communicate and perform CRUD operations on a given resource.

The main idea of REST is treating data on the server-side as resources that can be CRUDed. 
The most common way of approaching REST is in formatting the URLs and HTTP verbs in your applications.

gist -> files in github

username
text

bob - hello

GET /allcomments
GET /all
GET /showmeallcommentsnow

POST /newcomment
POST /makecomment

SO
| NAME    | PATH                | VERB   | PURPOSE                            |
| ------- | ------------------- | ------ | ---------------------------------- |
| Index   | /comments           | GET    | Display all comments               |
| New     | /comments/new       | GET    | Form to create new comment         |
| Create  | /comments           | POST   | Creates new comment on server      |
| Show    | /comments/\:id      | GET    | Details for one specific comment   |
| Edit    | /comments/\:id/edit | GET    | Form to edit specific comment      |
| Update  | /comments/\:id      | PATCH  | Updates specific comment on server |
| Destroy | /comments/\:id      | DELETE | Deletes specific item on server    |


route names of above are in the slides.

res.redirect('/comments');  // if we don't do that, there will be resubmit the form alert in the page.

npm i uuid  -> universal unique id  -> for adding new id's
